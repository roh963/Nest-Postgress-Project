name: CD - Build and Push Docker Image

on:
  push:
    branches:
      - main
      - feature/aws-snow

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm ci --legacy-peer-deps
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/roh963/nest-postgress-project:latest
            ghcr.io/roh963/nest-postgress-project:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          attestations: type=provenance,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check DB_PASSWORD
        run: |
          if [ -z "${{ secrets.DB_PASSWORD }}" ]; then
            echo "Error: DB_PASSWORD is not set"
            exit 1
          else
            echo "DB_PASSWORD is set"
          fi
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          ACCESS_TOKEN_TTL_MIN: ${{ secrets.ACCESS_TOKEN_TTL_MIN }}
          REFRESH_TOKEN_TTL_DAYS: ${{ secrets.REFRESH_TOKEN_TTL_DAYS }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CALLBACK_URL: ${{ secrets.GOOGLE_CALLBACK_URL }}
          OAUTH_GITHUB_CLIENT_ID: ${{ secrets.OAUTH_GITHUB_CLIENT_ID }}
          OAUTH_GITHUB_CLIENT_SECRET: ${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}
          OAUTH_GITHUB_CALLBACK_URL: ${{ secrets.OAUTH_GITHUB_CALLBACK_URL }}
          OAUTH_CALLBACK_BASE: ${{ secrets.OAUTH_CALLBACK_BASE }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          WEBHOOK_URL_SLACK: ${{ secrets.WEBHOOK_URL_SLACK }}
          THROTTLE_TTL: ${{ secrets.THROTTLE_TTL }}
          THROTTLE_LIMIT: ${{ secrets.THROTTLE_LIMIT }}
          ACTOR: ${{ github.actor }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd ~/nest-postgress-project || git clone https://github.com/roh963/nest-postgress-project.git ~/nest-postgress-project && cd ~/nest-postgress-project
            git fetch origin
            git reset --hard origin/${{ github.ref_name }}
            SHA=${{ github.sha }}
            sed -i "s|ghcr.io/roh963/nest-postgress-project:.*|ghcr.io/roh963/nest-postgress-project:${SHA}|g" docker-compose.prod.yml
            echo "Creating .env.prod"
            cat > .env.prod << EOF
            DB_PASSWORD=$DB_PASSWORD
            DATABASE_URL=postgresql://postgres:$DB_PASSWORD@db:5432/nestdb?schema=public
            JWT_SECRET=$JWT_SECRET
            JWT_REFRESH_SECRET=$JWT_REFRESH_SECRET
            ACCESS_TOKEN_TTL_MIN=$ACCESS_TOKEN_TTL_MIN
            REFRESH_TOKEN_TTL_DAYS=$REFRESH_TOKEN_TTL_DAYS
            GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID
            GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
            GOOGLE_CALLBACK_URL=$GOOGLE_CALLBACK_URL
            GITHUB_CLIENT_ID=$OAUTH_GITHUB_CLIENT_ID
            GITHUB_CLIENT_SECRET=$OAUTH_GITHUB_CLIENT_SECRET
            GITHUB_CALLBACK_URL=$OAUTH_GITHUB_CALLBACK_URL
            OAUTH_CALLBACK_BASE=$OAUTH_CALLBACK_BASE
            CLOUDINARY_CLOUD_NAME=$CLOUDINARY_CLOUD_NAME
            CLOUDINARY_API_KEY=$CLOUDINARY_API_KEY
            CLOUDINARY_API_SECRET=$CLOUDINARY_API_SECRET
            WEBHOOK_URL_SLACK=$WEBHOOK_URL_SLACK
            REDIS_URL=redis://redis:6379
            THROTTLE_TTL=$THROTTLE_TTL
            THROTTLE_LIMIT=$THROTTLE_LIMIT
            PORT=3000
            NODE_ENV=production
            CORS_ORIGINS=http://13.60.181.126,http://my-nest-app.duckdns.org,https://example.com
            EOF
            chmod 600 .env.prod
            # Clear any bad cached login for public pull
            docker logout ghcr.io || true
            docker compose -f docker-compose.prod.yml --env-file .env.prod down || true
            docker compose -f docker-compose.prod.yml --env-file .env.prod pull || exit 1
            docker compose -f docker-compose.prod.yml --env-file .env.prod up -d
            sleep 30
            docker compose -f docker-compose.prod.yml --env-file .env.prod exec api npx prisma migrate deploy || true
            docker compose -f docker-compose.prod.yml --env-file .env.prod logs api --tail=100

  smoke-tests:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: npm install -g newman newman-reporter-html
      - run: |
          if [ ! -f "postman-collection.json" ]; then
            echo "Error: postman-collection.json not found!"
            exit 1
          fi
          newman run postman-collection.json --env-var baseUrl=${{ secrets.STAGING_URL }} -r html --reporter-html-export smoke-report.html || exit 1
      - uses: actions/upload-artifact@v4
        with:
          name: smoke-report
          path: smoke-report.html