name: 🚀 CI/CD - Nest Postgres Project

on:
  push:
    branches:
      - main
      - feature/aws-snow
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE_REPO: ghcr.io/roh963/nest-postgress-project

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_REPO }}:latest
            ${{ env.IMAGE_REPO }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify required secrets
        run: |
          echo "Checking secrets..."
          if [ -z "${{ secrets.EC2_HOST }}" ]; then echo "❌ Missing: EC2_HOST"; exit 1; fi
          if [ -z "${{ secrets.EC2_USER }}" ]; then echo "❌ Missing: EC2_USER"; exit 1; fi
          if [ -z "${{ secrets.EC2_SSH_KEY }}" ]; then echo "❌ Missing: EC2_SSH_KEY"; exit 1; fi
          if [ -z "${{ secrets.GH_TOKEN }}" ]; then echo "❌ Missing: GH_TOKEN"; exit 1; fi
          if [ -z "${{ secrets.DB_PASSWORD }}" ]; then echo "❌ Missing: DB_PASSWORD"; exit 1; fi
          echo "✅ All required secrets present"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          ACTOR: ${{ github.actor }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          WEBHOOK_URL_SLACK: ${{ secrets.WEBHOOK_URL_SLACK }}
          THROTTLE_TTL: ${{ secrets.THROTTLE_TTL }}
          THROTTLE_LIMIT: ${{ secrets.THROTTLE_LIMIT }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          envs: GH_TOKEN,ACTOR,DB_PASSWORD,JWT_SECRET,JWT_REFRESH_SECRET,CLOUDINARY_API_SECRET,WEBHOOK_URL_SLACK,THROTTLE_TTL,THROTTLE_LIMIT
          script: |
            set -eo pipefail

            echo ">>> Updating repo"
            cd ~/nest-postgress-project || (git clone https://github.com/roh963/nest-postgress-project.git ~/nest-postgress-project && cd ~/nest-postgress-project)

            git fetch origin
            git reset --hard origin/main

            SHA=${{ github.sha }}
            echo "Using image tag: $SHA"

            echo ">>> Create env file"
            cat > .env.prod <<EOF
            NODE_ENV=production
            DB_PASSWORD=${DB_PASSWORD:?Error: DB_PASSWORD not set}
            DATABASE_URL=postgresql://postgres:${DB_PASSWORD:?Error: DB_PASSWORD not set}@db:5432/nestdb?schema=public
            REDIS_URL=redis://redis:6379
            JWT_SECRET=${JWT_SECRET:-78371695282dc652dab595399e3ef963}
            JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-70214c0b4e3b87e8846a0bed82fb4a85}
            PORT=3000
            STAGING_URL=http://13.60.181.126
            HEALTH_PATH=/health
            POSTGRES_DB=nestdb
            POSTGRES_USER=postgres
            POSTGRES_PASSWORD=${DB_PASSWORD:?Error: DB_PASSWORD not set}
            ACCESS_TOKEN_TTL_MIN=15
            REFRESH_TOKEN_TTL_DAYS=7
            CORS_ORIGINS=${CORS_ORIGINS:-*}
            GOOGLE_CLIENT_ID=30970456551-fsk0lr61co87d51pcogadp6r3qm571ir.apps.googleusercontent.com
            GOOGLE_CLIENT_SECRET=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
            GOOGLE_CALLBACK_URL=http://13.60.181.126/auth/google/callback
            GITHUB_CLIENT_ID=Ov23lipEgSf9C3aon5f6
            GITHUB_CLIENT_SECRET=0fa8a15346f9a377044740324db84fcb1925dc2c
            GITHUB_CALLBACK_URL=http://13.60.181.126/auth/github/callback
            OAUTH_CALLBACK_BASE=http://13.60.181.126
            CLOUDINARY_CLOUD_NAME=dynogoewn
            CLOUDINARY_API_KEY=576497932985262
            CLOUDINARY_API_SECRET=xbBcXETWNelmblLlgkZCh2pG4lc
            WEBHOOK_URL_SLACK=${WEBHOOK_URL_SLACK:-https://discordapp.com/api/webhooks/1419640683672637550/o8ngECvD2YHrMWmff-37vPqSskvRSSm0f6B_ilZ8wLTKrcb4Znpo89j0G91Z_CF3CPCk}
            THROTTLE_TTL=${THROTTLE_TTL:-60}
            THROTTLE_LIMIT=${THROTTLE_LIMIT:-10}
            EOF
            chmod 600 .env.prod

            echo ">>> Docker login"
            echo "$GH_TOKEN" | docker login ghcr.io -u "$ACTOR" --password-stdin

            echo ">>> Pull new image and restart services"
            docker compose -f docker-compose.prod.yml --env-file .env.prod pull
            docker compose -f docker-compose.prod.yml --env-file .env.prod up -d

            echo ">>> Run migrations"
            docker compose -f docker-compose.prod.yml --env-file .env.prod exec -T api npx prisma migrate deploy

            echo "✅ Deployment complete"