name: CD - Build and Push Docker Image

on:
  push:
    branches: [main]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ghcr.io/roh963/nest-postgress-project:latest,ghcr.io/roh963/nest-postgress-project:${{ github.sha }}
          cache-from: type=gha   
          cache-to: type=gha,mode=max

  smoke-tests:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Smoke Tests
        env:
         STAGING_URL: http://13.60.181.126  # Staging URL
        run: |
          npm install -g newman newman-reporter-html
          newman run postman/collection.json \
            --environment postman/environment.json \
            --env-var STAGING_URL=${{ env.STAGING_URL }} \
            --reporters cli,html \
            --reporter-html-export smoke-report.html \
            --bail  # Fail if any test red
      - name: Upload Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-report
          path: smoke-report.html

  deploy:
    needs: smoke-tests  # Smoke pass pe
    if: success()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/Nest-Postgress-Project
            git pull origin main
            SHA=${{ github.sha }}
            sed -i "s/latest/${SHA}/g" docker-compose.prod.yml
            docker compose -f docker-compose.prod.yml down
            docker compose -f docker-compose.prod.yml up -d
            sleep 20
            docker compose logs --tail=20 api