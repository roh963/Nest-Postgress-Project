name: 🚀 CI/CD - Nest Postgres Project

on:
  push:
    branches:
      - main
      - feature/aws-snow
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE_REPO: ghcr.io/roh963/nest-postgress-project

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_REPO }}:latest
            ${{ env.IMAGE_REPO }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ✅ FIX 1: simple check for missing secrets (no array usage)
      - name: Verify required secrets
        run: |
          REQUIRED_SECRETS=("EC2_HOST" "EC2_USER" "EC2_SSH_KEY" "GH_TOKEN" "DB_PASSWORD")
          missing=0
          for s in "${REQUIRED_SECRETS[@]}"; do
            if [ -z "${{ secrets.EC2_HOST }}" ] && [ "$s" = "EC2_HOST" ]; then echo "Missing: EC2_HOST"; missing=1; fi
            if [ -z "${{ secrets.EC2_USER }}" ] && [ "$s" = "EC2_USER" ]; then echo "Missing: EC2_USER"; missing=1; fi
            if [ -z "${{ secrets.EC2_SSH_KEY }}" ] && [ "$s" = "EC2_SSH_KEY" ]; then echo "Missing: EC2_SSH_KEY"; missing=1; fi
            if [ -z "${{ secrets.GH_TOKEN }}" ] && [ "$s" = "GH_TOKEN" ]; then echo "Missing: GH_TOKEN"; missing=1; fi
            if [ -z "${{ secrets.DB_PASSWORD }}" ] && [ "$s" = "DB_PASSWORD" ]; then echo "Missing: DB_PASSWORD"; missing=1; fi
          done
          if [ "$missing" -ne 0 ]; then
            echo "❌ Missing required secrets. Please add them in Settings → Secrets → Actions."
            exit 1
          fi

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          ACTOR: ${{ github.actor }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          WEBHOOK_URL_SLACK: ${{ secrets.WEBHOOK_URL_SLACK }}
          THROTTLE_TTL: ${{ secrets.THROTTLE_TTL }}
          THROTTLE_LIMIT: ${{ secrets.THROTTLE_LIMIT }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            set -euo pipefail

            echo ">>> Updating repo"
            cd ~/nest-postgress-project || git clone https://github.com/roh963/nest-postgress-project.git ~/nest-postgress-project && cd ~/nest-postgress-project

            git fetch origin
            # ✅ FIX 2: default main branch safely (github.ref_name fallback removed)
            git reset --hard origin/main || true

            SHA=${{ github.sha }}
            echo "Using image tag: $SHA"

            echo ">>> Create env file"
            cat > .env.prod <<EOF
            DB_PASSWORD=$DB_PASSWORD
            DATABASE_URL=postgresql://postgres:$DB_PASSWORD@db:5432/nestdb?schema=public
            JWT_SECRET=$JWT_SECRET
            JWT_REFRESH_SECRET=$JWT_REFRESH_SECRET
            CLOUDINARY_API_SECRET=$CLOUDINARY_API_SECRET
            WEBHOOK_URL_SLACK=$WEBHOOK_URL_SLACK
            THROTTLE_TTL=$THROTTLE_TTL
            THROTTLE_LIMIT=$THROTTLE_LIMIT
            CORS_ORIGINS=http://13.60.181.126,http://my-nest-app.duckdns.org,https://example.com
            EOF
            chmod 600 .env.prod

            echo ">>> Docker login"
            echo "$GH_TOKEN" | docker login ghcr.io -u "$ACTOR" --password-stdin

            echo ">>> Pull new image and restart services"
            docker compose -f docker-compose.prod.yml --env-file .env.prod pull
            docker compose -f docker-compose.prod.yml --env-file .env.prod up -d

            echo ">>> Run migrations"
            docker compose -f docker-compose.prod.yml --env-file .env.prod exec -T api npx prisma migrate deploy

            echo "✅ Deployment complete"
