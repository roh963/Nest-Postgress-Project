generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  passwordHash String?
  role         String        @default("user")
  createdAt    DateTime      @default(now())
  refreshToken String?
  feedbacks    Feedback[]
  providers    UserProvider[]
  auditLogs    AuditLog[]
  files        File[]   

  @@index([role])     
}

model Feedback {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])

  @@index([createdAt(sort: Desc)])  // New: For sorting by date in descending order (pagination)
  @@index([userId])                // New: For filtering by userId (FK)
  @@index([email])                 // New: For filtering/search by email
}

model UserProvider {
  id             Int      @id @default(autoincrement())
  userId         Int
  provider       String
  providerUserId String
  accessToken    String
  refreshToken   String?
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])
  @@unique([provider, providerUserId])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int?
  action    String
  details   String?
  requestId String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model File {
  id         String   @id @default(cuid())
  url        String
  key        String
  size       Int
  mimetype   String
  uploadedBy Int
  user       User     @relation(fields: [uploadedBy], references: [id]) // Relation to User
  createdAt  DateTime @default(now())
}