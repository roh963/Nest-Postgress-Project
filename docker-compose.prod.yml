version: '3.8'

services:
  api:
    image: ghcr.io/roh963/nest-postgress-project:latest  # Updated by CD script
    ports:
      - '3000:3000'
    env_file:
      - .env.prod  # Secrets here (not in repo)
    environment:
      - REDIS_URL=redis://redis:6379
      - PORT=3000
      - HEALTH_PATH=/health
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    command: sh -c "npx prisma migrate deploy && node dist/main"  # Migrations first
    healthcheck:
      test: ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  worker:
    image: ghcr.io/roh963/nest-postgress-project:latest
    env_file:
      - .env.prod
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    command: sh -c "until nc -z redis 6379; do sleep 1; done && node dist/worker/main"  # Retry Redis (assume worker path)

  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}  # Use secrets
      POSTGRES_USER: postgres
      POSTGRES_DB: nestdb
    ports:
      - '5432:5432'
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - '80:80'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db-data:
